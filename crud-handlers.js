// =================================================================
// CRUD HANDLERS (crud-handlers.js)
// =================================================================
// Contiene la lÃ³gica para Crear, Leer, Actualizar y Borrar (CRUD) entradas.

// --- Crumb (Nota principal) ---

window.saveEntry = function() {
Â  Â  const note = document.getElementById('note-input').value.trim();
Â  Â  if (!note) {
Â  Â  Â  Â  alert('Please write a note');
Â  Â  Â  Â  return;
Â  Â  }

Â  Â  // Variables de state-manager.js
Â  Â  const moodData = selectedMood !== null ? window.moods[selectedMood] : null;
Â  Â  const timestamp = getTimestampFromInput('datetime-input'); // De utils.js

Â  Â  if (editingEntryId) {
Â  Â  Â  Â  const entryIndex = window.entries.findIndex(e => e.id === editingEntryId);
Â  Â  Â  Â  if (entryIndex !== -1) {
Â  Â  Â  Â  Â  Â  window.entries[entryIndex] = {
Â  Â  Â  Â  Â  Â  Â  Â  ...window.entries[entryIndex],
Â  Â  Â  Â  Â  Â  Â  Â  timestamp: timestamp,
Â  Â  Â  Â  Â  Â  Â  Â  note: note,
Â  Â  Â  Â  Â  Â  Â  Â  location: document.getElementById('location-input').value,
Â  Â  Â  Â  Â  Â  Â  Â  weather: document.getElementById('weather-input').value,
Â  Â  Â  Â  Â  Â  Â  Â  images: [...currentImages],
Â  Â  Â  Â  Â  Â  Â  Â  audio: currentAudio,
Â  Â  Â  Â  Â  Â  Â  Â  coords: currentCoords ? { ...currentCoords } : window.entries[entryIndex].coords,
Â  Â  Â  Â  Â  Â  Â  Â  mood: moodData,
Â  Â  Â  Â  Â  Â  Â  Â  isTimedActivity: false,
Â  Â  Â  Â  Â  Â  Â  Â  isQuickTrack: false,
Â  Â  Â  Â  Â  Â  Â  Â  isSpent: false,
Â  Â  Â  Â  Â  Â  Â  Â  type: null
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  }
Â  Â  } else {
Â  Â  Â  Â  const entry = {
Â  Â  Â  Â  Â  Â  id: Date.now(),
Â  Â  Â  Â  Â  Â  timestamp: timestamp,
Â  Â  Â  Â  Â  Â  note: note,
Â  Â  Â  Â  Â  Â  location: document.getElementById('location-input').value,
Â  Â  Â  Â  Â  Â  weather: document.getElementById('weather-input').value,
Â  Â  Â  Â  Â  Â  images: [...currentImages],
Â  Â  Â  Â  Â  Â  audio: currentAudio,
Â  Â  Â  Â  Â  Â  coords: currentCoords ? { ...currentCoords } : null,
Â  Â  Â  Â  Â  Â  mood: moodData
Â  Â  Â  Â  };
Â  Â  Â  Â  window.entries.unshift(entry);
Â  Â  }

Â  Â  saveData(); // De app.js
Â  Â  renderTimeline(); // De ui-renderer.js
Â  Â  window.toggleForm(); // De ui-handlers.js
}

window.editEntry = function(id) {
Â  Â  const entry = window.entries.find(e => e.id === id); // window.entries de state-manager.js
Â  Â  if (!entry) return;

Â  Â  if (entry.isTimedActivity) {
Â  Â  Â  Â  editTimeEvent(entry);
Â  Â  Â  Â  return;
Â  Â  }
Â  Â  if (entry.isQuickTrack) {
Â  Â  Â  Â  editTrackEvent(entry);
Â  Â  Â  Â  return;
Â  Â  }
Â  Â  if (entry.isSpent) {
Â  Â  Â  Â  editSpentEvent(entry);
Â  Â  Â  Â  return;
Â  Â  }
Â  Â  if (entry.type === 'recap') {
Â  Â  Â  Â  editRecapEvent(entry);
Â  Â  Â  Â  return;
Â  Â  }

Â  Â  // Es un "Crumb" normal
Â  Â  // Variables de state-manager.js
Â  Â  editingEntryId = id;
Â  Â  currentImages = [...(entry.images || [])];
Â  Â  currentAudio = entry.audio || null;
Â  Â  currentCoords = entry.coords ? { ...entry.coords } : null;

Â  Â  document.getElementById('note-input').value = entry.note;
Â  Â  document.getElementById('location-input').value = entry.location || '';
Â  Â  document.getElementById('weather-input').value = entry.weather || '';

Â  Â  const date = new Date(entry.timestamp);
Â  Â  const year = date.getFullYear();
Â  Â  const month = String(date.getMonth() + 1).padStart(2, '0');
Â  Â  const day = String(date.getDate()).padStart(2, '0');
Â  Â  const hours = String(date.getHours()).padStart(2, '0');
Â  Â  const minutes = String(date.getMinutes()).padStart(2, '0');
Â  Â  document.getElementById('datetime-input').value = `${year}-${month}-${day}T${hours}:${minutes}`;

Â  Â  if (entry.mood) {
Â  Â  Â  Â  const moodIndex = window.moods.findIndex(m => m.emoji === entry.mood.emoji && m.label === entry.mood.label);
Â  Â  Â  Â  selectedMood = moodIndex !== -1 ? moodIndex : null;
Â  Â  } else {
Â  Â  Â  Â  selectedMood = null;
Â  Â  }

Â  Â  renderImagePreviews(); // De media-handlers.js
Â  Â  renderAudioPreview(); // De media-handlers.js
Â  Â  window.renderMoodSelector(); // De ui-renderer.js

Â  Â  if (entry.coords) {
Â  Â  Â  Â  showMiniMap(entry.coords.lat, entry.coords.lon, 'form-map'); // De ui-renderer.js
Â  Â  }

Â  Â  document.getElementById('delete-btn').classList.remove('hidden');
Â  Â  document.getElementById('save-btn').textContent = 'ðŸ’¾ Update';
Â  Â Â 
Â  Â  const formWindow = document.getElementById('form-window');
Â  Â  document.getElementById('timer-window').classList.add('hidden');
Â  Â  document.getElementById('track-window').classList.add('hidden');
Â  Â  document.getElementById('spent-window').classList.add('hidden');
Â  Â  document.getElementById('recap-form').classList.add('hidden');
Â  Â Â 
Â  Â  formWindow.classList.remove('hidden');
Â  Â  formWindow.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

// --- Time Event ---

function editTimeEvent(entry) {
Â  Â  // Variables de state-manager.js
Â  Â  editingEntryId = entry.id;
Â  Â  selectedDuration = entry.duration;
Â  Â  selectedActivity = entry.activity;
Â  Â Â 
Â  Â  const date = new Date(entry.timestamp);
Â  Â  const year = date.getFullYear();
Â  Â  const month = String(date.getMonth() + 1).padStart(2, '0');
Â  Â  const day = String(date.getDate()).padStart(2, '0');
Â  Â  const hours = String(date.getHours()).padStart(2, '0');
Â  Â  const minutes = String(date.getMinutes()).padStart(2, '0');
Â  Â  document.getElementById('datetime-input-time').value = `${year}-${month}-${day}T${hours}:${minutes}`;
Â  Â Â 
Â  Â  document.getElementById('time-optional-note').value = entry.optionalNote || '';
Â  Â Â 
Â  Â  if (typeof window.updateTimerOptions === 'function') { // De settings-manager.js
Â  Â  Â  Â  window.updateTimerOptions();
Â  Â  }
Â  Â Â 
Â  Â  document.querySelectorAll('.duration-option').forEach(el => {
Â  Â  Â  Â  el.classList.remove('selected');
Â  Â  Â  Â  if (parseInt(el.dataset.duration) === selectedDuration) {
Â  Â  Â  Â  Â  Â  el.classList.add('selected');
Â  Â  Â  Â  }
Â  Â  });
Â  Â Â 
Â  Â  document.querySelectorAll('#activity-selector .activity-option').forEach(el => {
Â  Â  Â  Â  el.classList.remove('selected');
Â  Â  Â  Â  if (el.dataset.activity === selectedActivity) {
Â  Â  Â  Â  Â  Â  el.classList.add('selected');
Â  Â  Â  Â  }
Â  Â  });
Â  Â Â 
Â  Â  checkTimerReady(); // De ui-handlers.js
Â  Â Â 
Â  Â  const timerWindow = document.getElementById('timer-window');
Â  Â  document.getElementById('create-time-btn').textContent = 'ðŸ’¾ Update Event';
Â  Â  document.getElementById('delete-time-btn').classList.remove('hidden');
Â  Â Â 
Â  Â  document.getElementById('form-window').classList.add('hidden');
Â  Â  document.getElementById('track-window').classList.add('hidden');
Â  Â  document.getElementById('spent-window').classList.add('hidden');
Â  Â  document.getElementById('recap-form').classList.add('hidden');

Â  Â  timerWindow.classList.remove('hidden');
Â  Â  timerWindow.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

window.createTimeEvent = function() {
Â  Â  // Variables de state-manager.js
Â  Â  if (!selectedDuration || !selectedActivity) return;
Â  Â Â 
Â  Â  const timestamp = getTimestampFromInput('datetime-input-time'); // De utils.js
Â  Â  const optionalNote = document.getElementById('time-optional-note').value.trim();
Â  Â Â 
Â  Â  if (editingEntryId) {
Â  Â  Â  Â  const entryIndex = window.entries.findIndex(e => e.id === editingEntryId);
Â  Â  Â  Â  if (entryIndex !== -1) {
Â  Â  Â  Â  Â  Â  window.entries[entryIndex] = {
Â  Â  Â  Â  Â  Â  Â  Â  ...window.entries[entryIndex],
Â  Â  Â  Â  Â  Â  Â  Â  timestamp: timestamp,
Â  Â  Â  Â  Â  Â  Â  Â  note: `${selectedActivity} - ${selectedDuration} minutes`,
Â  Â  Â  Â  Â  Â  Â  Â  activity: selectedActivity,
Â  Â  Â  Â  Â  Â  Â  Â  duration: selectedDuration,
Â  Â  Â  Â  Â  Â  Â  Â  optionalNote: optionalNote,
Â  Â  Â  Â  Â  Â  Â  Â  isTimedActivity: true,
Â  Â  Â  Â  Â  Â  Â  Â  isQuickTrack: false,
Â  Â  Â  Â  Â  Â  Â  Â  isSpent: false,
Â  Â  Â  Â  Â  Â  Â  Â  type: null,
Â  Â  Â  Â  Â  Â  Â  Â  mood: null
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  }
Â  Â  Â  Â  editingEntryId = null;
Â  Â  } else {
Â  Â  Â  Â  const entry = {
Â  Â  Â  Â  Â  Â  id: Date.now(),
Â  Â  Â  Â  Â  Â  timestamp: timestamp,
Â  Â  Â  Â  Â  Â  note: `${selectedActivity} - ${selectedDuration} minutes`,
Â  Â  Â  Â  Â  Â  location: '',
Â  Â  Â  Â  Â  Â  weather: '',
Â  Â  Â  Â  Â  Â  images: [],
Â  Â  Â  Â  Â  Â  audio: null,
Â  Â  Â  Â  Â  Â  coords: null,
Â  Â  Â  Â  Â  Â  mood: null,
Â  Â  Â  Â  Â  Â  activity: selectedActivity,
Â  Â  Â  Â  Â  Â  duration: selectedDuration,
Â  Â  Â  Â  Â  Â  isTimedActivity: true,
Â  Â  Â  Â  Â  Â  optionalNote: optionalNote
Â  Â  Â  Â  };
Â  Â  Â  Â  window.entries.unshift(entry);
Â  Â  }
Â  Â Â 
Â  Â  saveData(); // De app.js
Â  Â  renderTimeline(); // De ui-renderer.js
Â  Â Â 
Â  Â  alert(`âœ… Time event ${editingEntryId ? 'updated' : 'created'}!`);
Â  Â  window.toggleTimer(); // De ui-handlers.js
Â  Â Â 
Â  Â  document.getElementById('create-time-btn').textContent = 'Create Event';
Â  Â  document.getElementById('delete-time-btn').classList.add('hidden');
Â  Â  document.getElementById('time-optional-note').value = '';
}

// --- Track Event ---

function editTrackEvent(entry) {
Â  Â  // Variables de state-manager.js
Â  Â  editingEntryId = entry.id;
Â  Â  selectedTrackItem = entry.note;
Â  Â Â 
Â  Â  const date = new Date(entry.timestamp);
Â  Â  const year = date.getFullYear();
Â  Â  const month = String(date.getMonth() + 1).padStart(2, '0');
Â  Â  const day = String(date.getDate()).padStart(2, '0');
Â  Â  const hours = String(date.getHours()).padStart(2, '0');
Â  Â  const minutes = String(date.getMinutes()).padStart(2, '0');
Â  Â  document.getElementById('datetime-input-track').value = `${year}-${month}-${day}T${hours}:${minutes}`;
Â  Â Â 
Â  Â  document.getElementById('track-optional-note').value = entry.optionalNote || '';
Â  Â Â 
Â  Â  if (typeof window.updateTrackOptions === 'function') { // De settings-manager.js
Â  Â  Â  Â  window.updateTrackOptions();
Â  Â  }
Â  Â Â 
Â  Â  document.querySelectorAll('#track-selector .activity-option').forEach(el => {
Â  Â  Â  Â  if (el.dataset.item === selectedTrackItem) {
Â  Â  Â  Â  Â  Â  el.classList.add('selected');
Â  Â  Â  Â  }
Â  Â  });
Â  Â Â 
Â  Â  document.getElementById('save-track-btn').disabled = false;
Â  Â  document.getElementById('save-track-btn').textContent = 'ðŸ’¾ Update Track';
Â  Â  document.getElementById('delete-track-btn').classList.remove('hidden');
Â  Â Â 
Â  Â  const trackWindow = document.getElementById('track-window');
Â  Â  document.getElementById('form-window').classList.add('hidden');
Â  Â  document.getElementById('timer-window').classList.add('hidden');
Â  Â  document.getElementById('spent-window').classList.add('hidden');
Â  Â  document.getElementById('recap-form').classList.add('hidden');

Â  Â  trackWindow.classList.remove('hidden');
Â  Â  trackWindow.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

window.saveTrackEvent = function() {
Â  Â  if (!selectedTrackItem) return; // De state-manager.js
Â  Â Â 
Â  Â  const timestamp = getTimestampFromInput('datetime-input-track'); // De utils.js
Â  Â  const optionalNote = document.getElementById('track-optional-note').value.trim();
Â  Â Â 
Â  Â  if (editingEntryId) {
Â  Â  Â  Â  const entryIndex = window.entries.findIndex(e => e.id === editingEntryId);
Â  Â  Â  Â  if (entryIndex !== -1) {
Â  Â  Â  Â  Â  Â  window.entries[entryIndex] = {
Â  Â  Â  Â  Â  Â  Â  Â  ...window.entries[entryIndex],
Â  Â  Â  Â  Â  Â  Â  Â  timestamp: timestamp,
Â  Â  Â  Â  Â  Â  Â  Â  note: selectedTrackItem,
Â  Â  Â  Â  Â  Â  Â  Â  optionalNote: optionalNote,
Â  Â  Â  Â  Â  Â  Â  Â  isQuickTrack: true,
Â  Â  Â  Â  Â  Â  Â  Â  isTimedActivity: false,
Â  Â  Â  Â  Â  Â  Â  Â  isSpent: false,
Â  Â  Â  Â  Â  Â  Â  Â  type: null,
Â  Â  Â  Â  Â  Â  Â  Â  mood: null
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  }
Â  Â  Â  Â  editingEntryId = null;
Â  Â  Â  Â  alert(`âœ… Track updated: ${selectedTrackItem}`);
Â  Â  } else {
Â  Â  Â  Â  const entry = {
Â  Â  Â  Â  Â  Â  id: Date.now(),
Â  Â  Â  Â  Â  Â  timestamp: timestamp,
Â  Â  Â  Â  Â  Â  note: selectedTrackItem,
Â  Â  Â  Â  Â  Â  location: '',
Â  Â  Â  Â  Â  Â  weather: '',
Â  Â  Â  Â  Â  Â  images: [],
Â  Â  Â  Â  Â  Â  audio: null,
Â  Â  Â  Â  Â  Â  coords: null,
Â  Â  Â  Â  Â  Â  mood: null,
Â  Â  Â  Â  Â  Â  isQuickTrack: true,
Â  Â  Â  Â  Â  Â  optionalNote: optionalNote
Â  Â  Â  Â  };
Â  Â  Â  Â  window.entries.unshift(entry);
Â  Â  Â  Â  alert(`âœ… Tracked: ${selectedTrackItem}`);
Â  Â  }
Â  Â Â 
Â  Â  saveData(); // De app.js
Â  Â  renderTimeline(); // De ui-renderer.js
Â  T window.toggleTrack(); // De ui-handlers.js
Â  Â Â 
Â  Â  document.getElementById('save-track-btn').textContent = 'Save Track';
Â  Â  document.getElementById('delete-track-btn').classList.add('hidden');
}

// --- Spent Event ---

function editSpentEvent(entry) {
Â  Â  editingEntryId = entry.id; // De state-manager.js
Â  Â Â 
Â  Â  document.getElementById('spent-description').value = entry.note;
Â  Â  document.getElementById('spent-amount').value = entry.spentAmount;
Â  Â Â 
Â  Â  const date = new Date(entry.timestamp);
Â  Â  const year = date.getFullYear();
Â  Â  const month = String(date.getMonth() + 1).padStart(2, '0');
Â  Â  const day = String(date.getDate()).padStart(2, '0');
Â  Â  const hours = String(date.getHours()).padStart(2, '0');
Â  Â  const minutes = String(date.getMinutes()).padStart(2, '0');
Â  Â  document.getElementById('datetime-input-spent').value = `${year}-${month}-${day}T${hours}:${minutes}`;
Â  Â Â 
Â  Â  document.getElementById('delete-spent-btn').classList.remove('hidden');
Â  Â Â 
Â  Â  const spentWindow = document.getElementById('spent-window');
Â  Â  document.getElementById('form-window').classList.add('hidden');
Â  Â  document.getElementById('timer-window').classList.add('hidden');
Â  Â  document.getElementById('track-window').classList.add('hidden');
Â  Â  document.getElementById('recap-form').classList.add('hidden');

Â  Â  spentWindow.classList.remove('hidden');
Â  Â  spentWindow.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

window.saveSpent = function() {
Â  Â  const description = document.getElementById('spent-description').value.trim();
Â  Â  const amount = parseFloat(document.getElementById('spent-amount').value);

Â  Â  if (!description) {
Â  Â  Â  Â  alert('Please enter a description');
Â  Â  Â  Â  return;
Â  Â  }
Â  Â  if (!amount || amount <= 0 || isNaN(amount)) {
Â  Â  Â  Â  alert('Please enter a valid amount');
Â  Â  Â  Â  return;
Â  Â  }

Â  Â  const timestamp = getTimestampFromInput('datetime-input-spent'); // De utils.js

Â  Â  if (editingEntryId) {
Â  Â  Â  Â  const entryIndex = window.entries.findIndex(e => e.id === editingEntryId);
Â  Â  Â  Â  if (entryIndex !== -1) {
Â  Â  Â  Â  Â  Â  window.entries[entryIndex] = {
Â  Â  Â  Â  Â  Â  Â  Â  ...window.entries[entryIndex],
Â  Â  Â  Â  Â  Â  Â  Â  timestamp: timestamp,
Â  Â  Â  Â  Â  Â  Â  Â  note: description,
Â  Â  Â  Â  Â  Â  Â  Â  spentAmount: amount,
Â  Â  Â  Â  Â  Â  Â  Â  isSpent: true,
Â  Â  Â  Â  Â  Â  Â  Â  isTimedActivity: false,
Â  Â  Â  Â  Â  Â  Â  Â  isQuickTrack: false,
Â  Â  Â  Â  Â  Â  Â  Â  type: null,
Â  Â  Â  Â  Â  Â  Â  Â  mood: null
Â  Â  Â  Â  Â  Â  };
Â  Â  Â  Â  }
Â  Â  Â  Â  editingEntryId = null;
Â  Â  Â  Â  alert(`âœ… Spent updated: â‚¬${amount.toFixed(2)}`);
Â  Â  } else {
Â  Â  Â  Â  const entry = {
Â  Â  Â  Â  Â  Â  id: Date.now(),
Â  Â  Â  Â  Â  Â  timestamp: timestamp,
Â  Â  Â  Â  Â  Â  note: description,
Â  Â  Â  Â  Â  Â  location: '',
Â  Â  Â  Â  Â  Â  weather: '',
Â  Â  Â  Â  Â  Â  images: [],
Â  Â  Â  Â  Â  Â  audio: null,
Â  Â  Â  Â  Â  Â  coords: null,
Â  Â  Â  Â  Â  Â  mood: null,
Â  Â  Â  Â  Â  Â  spentAmount: amount,
Â  Â  Â  Â  Â  Â  isSpent: true
Â  Â  Â  Â  };
Â  Â  Â  Â  window.entries.unshift(entry);
Â  Â  Â  Â  alert(`âœ… Spent tracked: â‚¬${amount.toFixed(2)}`);
Â  Â  }
Â  Â Â 
Â  Â  saveData(); // De app.js
Â  Â  renderTimeline(); // De ui-renderer.js
Â  Â  window.toggleSpent(); // De ui-handlers.js
Â  Â  document.getElementById('delete-spent-btn').classList.add('hidden');
}

// --- Recap Event ---

function editRecapEvent(entry) {
Â  Â  editingEntryId = entry.id; // De state-manager.js
Â  Â Â 
Â  Â  document.getElementById('form-window').classList.add('hidden');
Â  Â  document.getElementById('timer-window').classList.add('hidden');
Â  Â  document.getElementById('track-window').classList.add('hidden');
Â  Â  document.getElementById('spent-window').classList.add('hidden');
Â  Â Â 
Â  Â  const recapForm = document.getElementById('recap-form');
Â  Â  recapForm.classList.remove('hidden');

Â  Â  const date = new Date(entry.timestamp);
Â  Â  const year = date.getFullYear();
Â  Â  const month = String(date.getMonth() + 1).padStart(2, '0');
Â  Â  const day = String(date.getDate()).padStart(2, '0');
Â  Â  const hours = String(date.getHours()).padStart(2, '0');
Â  Â  const minutes = String(date.getMinutes()).padStart(2, '0');
Â  Â  document.getElementById('datetime-input-recap').value = `${year}-${month}-${day}T${hours}:${minutes}`;
Â  Â Â 
Â  Â  document.getElementById('recap-reflection').value = entry.reflection || '';
Â  Â  document.getElementById('recap-rating').value = entry.rating || 5;
Â  Â  document.getElementById('recap-rating-value').textContent = entry.rating || 5;
Â  Â Â 
Â  Â  document.getElementById('recap-highlight-1').value = (entry.highlights && entry.highlights[0]) || '';
Â  Â  document.getElementById('recap-highlight-2').value = (entry.highlights && entry.highlights[1]) || '';
Â  Â  document.getElementById('recap-highlight-3').value = (entry.highlights && entry.highlights[2]) || '';
Â  Â Â 
Â  Â  document.getElementById('recap-bso').value = '';
Â  Â  document.getElementById('recap-bso-results').innerHTML = '';
Â  Â  document.getElementById('recap-selected-track').value = '';
Â  Â Â 
Â  Â  if (entry.track) {
Â  Â  Â  Â  window.selectTrack(entry.track.name, entry.track.artist, entry.track.url, entry.track.artwork); // De ui-handlers.js
Â  Â  }
Â  Â Â 
Â  Â  recapForm.scrollIntoView({ behavior: 'smooth', block: 'start' });
}

window.saveRecap = function() {
Â  Â  const reflection = document.getElementById('recap-reflection').value.trim();
Â  Â  const rating = document.getElementById('recap-rating').value;
Â  Â  const highlight1 = document.getElementById('recap-highlight-1').value.trim();
Â  Â  const highlight2 = document.getElementById('recap-highlight-2').value.trim();
Â  Â  const highlight3 = document.getElementById('recap-highlight-3').value.trim();
Â  Â  const selectedTrackJson = document.getElementById('recap-selected-track').value;
Â  Â  const timestamp = getTimestampFromInput('datetime-input-recap'); // De utils.js
Â  Â Â 
Â  Â  if (!reflection && !highlight1 && !highlight2 && !highlight3) {
Â  Â  Â  Â  alert('Please add at least one reflection or highlight');
Â  Â  Â  Â  return;
Â  Â  }
Â  Â Â 
Â  Â  const recapEntry = {
Â  Â  Â  Â  id: editingEntryId || Date.now(), // editingEntryId de state-manager.js
Â  Â  Â  Â  timestamp: timestamp,
Â  Â  Â  Â  type: 'recap',
Â  Â  Â  Â  reflection: reflection,
Â  Â  Â  Â  rating: parseInt(rating),
Â  Â  Â  Â  highlights: [highlight1, highlight2, highlight3].filter(h => h),
Â  Â  Â  Â  track: selectedTrackJson ? JSON.parse(selectedTrackJson) : null,
Â  Â  Â  Â  note: `Day Recap (Rating: ${rating}/10)`,
Â  Â  Â  Â  isTimedActivity: false,
Â  Â  Â  Â  isQuickTrack: false,
Â  Â  Â  Â  isSpent: false,
Â  Â  Â  Â  mood: null
Â  Â  };

Â  Â  if (editingEntryId) {
Â  Â  Â  Â  const entryIndex = window.entries.findIndex(e => e.id === editingEntryId);
Â  Â  Â  Â  if (entryIndex !== -1) {
Â  Â  Â  Â  Â  Â  window.entries[entryIndex] = recapEntry;
Â  Â  Â  Â  }
Â  Â  Â  Â  editingEntryId = null;
Â  Â  Â  Â  alert('ðŸŒŸ Recap updated!');
Â  Â  } else {
Â  Â  Â  Â  window.entries.unshift(recapEntry);
Â  Â  Â  Â  alert('ðŸŒŸ Recap saved!');
Â  Â  }
Â  Â Â 
Â  Â  saveData(); // De app.js
Â  Â  renderTimeline(); // De ui-renderer.js
Â  Â  window.closeRecapForm(); // De ui-handlers.js
}

// --- Delete ---

window.deleteCurrentEntry = function() {
Â  Â  if (!editingEntryId) return; // De state-manager.js
Â  Â Â 
Â  Â  let formIdToDelete = null;
Â  Â  if (!document.getElementById('form-window').classList.contains('hidden')) formIdToDelete = 'form-window';
Â  Â  else if (!document.getElementById('timer-window').classList.contains('hidden')) formIdToDelete = 'timer-window';
Â  Â  else if (!document.getElementById('track-window').classList.contains('hidden')) formIdToDelete = 'track-window';
Â  Â  else if (!document.getElementById('spent-window').classList.contains('hidden')) formIdToDelete = 'spent-window';
Â  Â  else if (!document.getElementById('recap-form').classList.contains('hidden')) formIdToDelete = 'recap-form';
Â  Â Â 
Â  Â  if (confirm('Delete this entry?')) {
Â  Â  Â  Â  window.entries = window.entries.filter(e => e.id !== editingEntryId);
Â  Â  Â  Â Â 
Â  Â  Â  Â  if (window.currentUser && !window.isOfflineMode) { // De firebase-config.js
Â  Â  Â  Â  Â  Â  window.deleteEntryFromFirebase(editingEntryId); // De firebase-config.js
Â  Â  Â  Â  }
Â  Â  Â  Â Â 
Â  Â  Â  Â  saveData(); // De app.js
Â  Â  Â  Â  renderTimeline(); // De ui-renderer.js
Â  Â  Â  Â Â 
Â  Â  Â  Â  if (formIdToDelete) {
Â  Â  Â  Â  Â  Â  document.getElementById(formIdToDelete).classList.add('hidden');
Â  Â  Â  Â  }
Â  Â  Â  Â Â 
Â  Â  Â  Â  editingEntryId = null;
Â  Â  }
}
